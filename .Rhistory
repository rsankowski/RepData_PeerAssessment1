qplot(log_latency, data=SA, facets = .~ Strategy)
qplot(displ, data = mpg, facet = drv ~., binwidth = 2)
qplot(displ, data = mpg, facets = drv ~., binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~., binwidth = 2)
qplot(log_latency, data=SA, facets = Strategy ~. )
qplot(log_latency, data=SA, facets = SA$Strategy ~. )
qplot(log_latency, data=SA, facets = SA$Strategy ~ . )
plot(testdat$x, testdat$y, type = "l", ylim = c(-3,3))
testdat <- data.fram(x = 1:100, y= rnorm(100))
testdat[50,2] <- 100
plot(testdat$x, testdat$y, type = "l", ylim = c(-3,3))
testdat <- data.fram(x = 1:100, y= rnorm(100))
testdat <- data.frame(x = 1:100, y= rnorm(100))
testdat[50,2] <- 100
plot(testdat$x, testdat$y, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x=x, y=y))
g+geom_line()
g+geom_line() + lim(-3,3)
g+geom_line() + ylim(-3,3)
g+geom_line() + coord_cartesian(ylim(-3,3))
g+geom_line() + coord_cartesian(ylim = c(-3,3))
library(swirl)
install.packages("ggplot2")
library(swirl)
swirl()
library(swirl)
swirl()
bye()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
?install_from_swirl
swirl()
SA<-read.csv("~/Desktop/Strategies Analysis/DSA01/DSA05R.csv")
library('tree')
head(SA)
SA$Rotation<-as.numeric(SA$Rotation)
SA$Error<-as.numeric(SA$Error)
SA$Strategy<-as.factor(SA$Strategy)
sapply(SA[1,],class)
plot(SA$Error,SA$Latency, col=SA$Strategy, main="Strategic Matrix",
xlab="Number of Errors", ylab="Latency(s)")
plot(SA$Error,SA$Latency, col=SA$Strategy, main="Strategic Matrix",
xlab="Number of Errors", ylab="Latency(s)", pch = 19)
plot(SA$Error,SA$Latency, col=SA$Strategy, main="Strategic Matrix",
xlab="Number of Errors", ylab="Latency(s)", pch = 20)
?rug
rug(SA$Latency, side = 2)
plot(SA$Error,SA$Latency, col=SA$Strategy, main="Strategic Matrix",
xlab="Number of Errors", ylab="Latency(s)", pch = 20)
rug(SA$Latency, side = 2, lwd = 0.1)
rug(SA$Error, side = 1, lwd = 0.1)
A
plot(SA$Error,SA$Latency, col=SA$Strategy, main="Strategic Matrix",
xlab="Number of Errors", ylab="Latency(s)", pch = 20)
rug(SA$Latency, side = 2, lwd = 0.1)
rug(SA$Error, side = 1, lwd = 0.5)
?col
plot(SA$Error,SA$Latency, col=col = cols[match(SA$Strategy)], main="Strategic Matrix",
plot(SA$Error,SA$Latency, col = cols[match(SA$Strategy)], main="Strategic Matrix",
xlab="Number of Errors", ylab="Latency(s)", pch = 20)
rug(SA$Latency, side = 2, lwd = 0.1)
rug(SA$Error, side = 1, lwd = 0.5)
cols <- brewer.pal(3, "Set3")
library(RColorBrewer)
cols <- brewer.pal(3, "Set3")
plot(SA$Error,SA$Latency, col = cols[match(SA$Strategy)], main="Strategic Matrix",
xlab="Number of Errors", ylab="Latency(s)", pch = 20)
(jColors <-
with(SA,
data.frame(Strategy = levels(Strategy),
color = I(brewer.pal(nlevels(Strategy), name = 'Set3')))))
library(plyr)
SA <- merge(SA, jColors, by = Strategy)
SA <- merge(SA, jColors, by = "Strategy")
dim(SA)
head(SA)
plot(SA$Error,SA$Latency, col = SA$color, main="Strategic Matrix",
xlab="Number of Errors", ylab="Latency(s)", pch = 20)
rug(SA$Latency, side = 2, lwd = 0.1)
rug(SA$Error, side = 1, lwd = 0.5)
(jColors <-
with(SA,
data.frame(Strategy = levels(Strategy),
color = I(brewer.pal(nlevels(Strategy), name = 'Dark2')))))
##integrate colors into the SA data frame
library(plyr)
SA <- merge(SA, jColors, by = "Strategy")
##Plotting
plot(SA$Error,SA$Latency, col = SA$color, main="Strategic Matrix",
xlab="Number of Errors", ylab="Latency(s)", pch = 20)
rug(SA$Latency, side = 2, lwd = 0.1)
SA <- merge(SA, jColors, by = "Strategy")
##Plotting
plot(SA$Error,SA$Latency, col = SA$color, main="Strategic Matrix",
xlab="Number of Errors", ylab="Latency(s)", pch = 20)
rug(SA$Latency, side = 2, lwd = 0.1)
rug(SA$Error, side = 1, lwd = 0.5)
(jColors <-
with(SA,
data.frame(Strategy = levels(Strategy),
color = I(brewer.pal(nlevels(Strategy), name = 'Dark2', alpha=0.4)))))
(jColors <-
with(SA,
color = I(brewer.pal(nlevels(Strategy), name = 'Dark2')))))
(jColors <-
with(SA,
data.frame(Strategy = levels(Strategy),
color = I(brewer.pal(nlevels(Strategy), name = 'Dark2')))))
##add transparency == alpha
jColoursAlpha <- add.alpha(jColours, alpha=0.4)
plot(SA$Error,SA$Latency, col = SA$color, alpha=0.4, main="Strategic Matrix",
xlab="Number of Errors", ylab="Latency(s)", pch = 20)
install.packages("knitr")
install.packages("kernlab")
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[, 1:5])
##Part 2 of lecture
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ] ##Subsetting according to random assignment
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainIndicator)
tail(trainIndicator)
?rbinom
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] + 1))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
names(trainSpam)[which.min(cvError)]
## Use the best model from the group
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
## Get predictions on the test set
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
## Classify as `spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
## Classification table
table(predictedSpam, testSpam$type)
## Error rate
(61 + 458)/(1346 + 458 + 61 + 449)
?glm
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
hc
plot(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
5
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataFrame, cm.colors(25))
heatmap(dataFrame, col = cm.colors(25))
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red", "orange", 'purple', pch = 3, cex = 2, lwd = 2))
points(cx, cy, col = c("red", "orange", 'purple'), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
aplly(distTmp, 2, which.min)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, ce = 2, lwd = 2)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, neCx, newCy)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newCLust2, mean)
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
yedit("addPatt.R")
myedit("addPatt.R")
source("addPatt.R", equal = TRUE)
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
scale(mat)
prcomp(scale(mat))
svd1$v[,1]
svd1$d
getwd()
setwd("data/RepData_PeerAssessment1/")
bye()
setwd("data/RepData_PeerAssessment1/")
setwd("./data/RepData_PeerAssessment1/")
getws()
getwd()
ifelse(!dir.exists(file.path("./data/","/RepData_PeerAssessment1/")), dir.create(file.path("./data/","/RepData_PeerAssessment1/")), FALSE)
ifelse(!dir.exists(file.path("./data/","./RepData_PeerAssessment1/")), dir.create(file.path("./data/","./RepData_PeerAssessment1/")), FALSE)
ifelse(!dir.exists(file.path("./data/RepData_PeerAssessment1/")), dir.create(file.path("./data/RepData_PeerAssessment1/")), FALSE)
setwd("./romansankowski")
setwd("./romansankowski/")
getwd()
setwd()
setwd("")
ifelse(!dir.exists("./data/RepData_PeerAssessment1/"), dir.create("./data/RepData_PeerAssessment1/"), FALSE)
ifelse(!dir.exists("~/data/RepData_PeerAssessment1/"), dir.create("~/data/RepData_PeerAssessment1/"), FALSE)
dir()
download.file(url,destfile="./data1.zip", method = "curl")
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url,destfile="./data1.zip", method = "curl")
data1 <- unzip ("data1.zip", exdir = "./")
dir()
data <- read.csv(data1, header = T, stringsAsFactors = FALSE)
head(data)
str(data)
head(data1)
library(plyr)
library(dplyr)
library(lubridate)
install.packages("dplyr")
install.packages("lubridate")
library(plyr)
library(dplyr)
library(lubridate)
?lubridate
em <- data %>%  group_by(date) %>% summarize(mean(steps, na.rm = TRUE))
str(em)
em
data
str(data)
em
str(em)
step_mean <- data %>%  group_by(date) %>% summarize(mean(steps, na.rm = TRUE))
step_mean <- data %>%  group_by(date) %>% summarize(median(steps, na.rm = TRUE))
step_mean <- data %>%  group_by(date) %>% summarize(mean(steps, na.rm = TRUE))
step_median <- data %>%  group_by(date) %>% summarize(median(steps, na.rm = TRUE))
str(step_mean)
str(step_median)
step <- data %>%  group_by(date) %>% summarize(sum(steps, na.rm = TRUE))
hist(steps, main = "Total steps per day")
hist(step, main = "Total steps per day")
head(step)
hist(step$sum, main = "Total steps per day")
par(mfrow = c(1,1))
hist(step$sum, main = "Total steps per day")
sum(step$date)
nrow(step)
meanmed <- step %>% summarize(mean(steps, na.rm = TRUE)) %>% summarize(median(steps, na.rm = TRUE))
meanmed <- step %>% summarize(mean(sum, na.rm = TRUE)) %>% summarize(median(sum, na.rm = TRUE))
meanmed
summary(step)
table(summary(step))
?barplot
meanmed <- step %>% transmute(mean = mean(sum), median = median(sum))
meanmed <- step %>% mutate(mean = mean(sum)) %>% mutate(median = median(sum))
stepmean <- step %>% mutate(mean = mean(sum)) %>% mutate(median = median(sum))
str(tep)
str(step)
stepmean <- step %>% mutate(mea = mean(sum)) %>% mutate(med = median(sum))
barplot(mean(step$sum), median(step$sum))
barplot(mean(step$sum))
table(summary(step))
tmp <- do.call(step,
list(mean = apply(step, 2, mean),
median = apply(step, 2, median)))
table(tmp)
tmp <- do.call(step,
list(mean = apply(step$sum, mean),
median = apply(step$sum, median)))
tmp <- do.call(data.frame,
list(mean = apply(step$sum, mean),
median = apply(step$sum, median)))
tmp <- do.call(data.frame,
list(mean = apply(step, 2, mean),
median = apply(step, 2, median)))
table(tmp)
stat.desc(step)
summary(step)
summary(step$sum)
data
head(data)
steppat <- step <- data %>%  group_by(interval) %>% summarize(mean(steps, na.rm = TRUE))
steppat
plot(steppat$interval, steppat$mean, type = "l", xlab = "Interval", ylab = "Average Step Count", main = "Total steps per day")
nrows(is.na = TRUE)
nrow(is.na = TRUE)
nrow(data, is.na = TRUE)
miss <- data$steps[is.na = TRUE]
nrow(miss)
miss
miss <- data$steps[NA]
nrow(miss)
miss
miss <- is.na(data)
nrow(miss)
miss <- data[is.na(data)]
nrow(miss)
miss
nrow(is.na(data))
miss <- data[is.na(data),]
nrow(miss)
miss
nrow(miss)
str(data)
str(step)
nrow(step)
step <- data %>%  group_by(date) %>% summarize(sum(steps, na.rm = TRUE))
nrow(step)
a <- rep(steppat, 61)
data$steps <- a[miss,]
data$steps <- a[miss]
miss
a
steppat
a <- rep(steppat$mean, 61) ## create a vector of mean numbers of steps for 61 days
data$steps <- a[miss,]
a
data$steps[is.na(data),] <- a
data
data
data$steps[is.na(data),] <- a
head(data)
data <- read.csv(data1, header = T, stringsAsFactors = FALSE)
data$steps <- a[is.na(data),]
head(data)
data <- read.csv(data1, header = T, stringsAsFactors = FALSE)
nrow(a)
str(a)
a <- data.frame(dim = c(17568,2))
a[,2] <- rep(steppat$mean, 61) ## create a vector with step patterns for 61 days
str(a)
a <- data.frame(matrix(ncol = 2, nrow = 17568))
a[,2] <- rep(steppat$mean, 61) ## create a vector with step patterns for 61 days
data$steps <- a[is.na(data),]
data$steps[is.na(data),] <- a[is.na(data),]
data$steps <- a[is.na(data),2]
[is.na(data),]
data$steps[miss] <- a[is.na(data),2]
data$steps[is.na(data),] <- a[miss, 2]
head(a)
data$steps[is.na(data),]
data$steps[miss] <- a[miss, 2]
miss
a <- rep(steppat$mean, 61) ## create a vector with step patterns for 61 days
head(a)
b <- data$steps
head(b)
b[na == TRUE] <- a[is.na(b)]
b[NA == TRUE] <- a[is.na(b)]
head(b)
b[is.na(data),] <- a[is.na(data),]
data[is.na(data),] <- a
miss <- a[is.na(data$steps)]
miss <- a[is.na(data$steps)] ## replace
miss
miss <- data[is.na(data),]
miss
nrow(miss)
miss <- data[is.na(data),]
nrow(miss)
data <- read.csv(data1, header = T, stringsAsFactors = FALSE)
miss <- data[is.na(data),]
nrow(miss)
miss <- a[is.na(data$steps)] ## replace
head(a)
head(miss)
miss -> data[is.na(data),]
head(data)
a[is.na(data$steps)] -> data[is.na(data),] ## now the values are filled back in
data <- read.csv(data1, header = T, stringsAsFactors = FALSE)
a[is.na(data$steps)] -> data[is.na(data),] ## now the values are filled back in
head(data)
data_imp <- data ## store data in a new data frame
data <- read.csv(data1, header = T, stringsAsFactors = FALSE)
data_imp <- data ## store data in a new data frame
a <- rep(steppat$mean, 61) ## create a vector with mean step counts for 61 days
a[is.na(data$steps)] -> data_imp[is.na(data),] ## replace NA with mean step counts
step_imp <- data_imp %>%  group_by(date) %>% summarize(sum(steps, na.rm = TRUE))
##Plot the total steps in histogram
hist(step_imp$sum, main = "Total steps per day")
summary(steps_imp)
summary(step_imp$sum)
data_wkd <- data_imp %>%  mutate(weekday = weekday(date))
library(lubridate)
data_wkd <- data_imp %>%  mutate(weekday = weekday(date))
data_wkd <- data_imp %>%  mutate(weekday = weekdays(date))
?weekdays
data_imp$weekday <- weekdays(data_imp$date)
str(data_imp)
data_imp <- data ## store data in a new data frame
a <- rep(steppat$mean, 61) ## create a vector with mean step counts for 61 days
a[is.na(data$steps)] -> data_imp$steps[is.na(data),] ## replace NA with mean step counts
a[is.na(data$steps)] -> data_imp$steps[is.na(data$steps)] ## replace NA with mean step counts
step_imp <- data_imp %>%  group_by(date) %>% summarize(sum(steps, na.rm = TRUE))
hist(step_imp$sum, main = "Total steps per day")  ##Plot the total steps in histogram
##summary stats of the new data set
summary(step_imp$sum)
data_wkd <- data_imp %>%  mutate(weekday = ?weekdays(date))
data_wkd <- data_imp %>%  mutate(weekday = weekdays(date))
str(data_imp)
step_imp <- data_imp %>%  group_by(date) %>% summarize(sum(steps, na.rm = TRUE))
hist(step_imp$sum, main = "Total steps per day")  ##Plot the total steps in histogram
data_wkd <- data_imp %>%  mutate(weekday = weekdays(date))
data <- read.csv(data1, header = T, stringsAsFactors = FALSE)
str(data)
data <- read.csv(data1, header = T, stringsAsFactors = FALSE)
head(data)
str(data)
ymd(data_imp$date)
data_wkd <- data_imp %>%  mutate(weekday = weekdays(date))
data_imp$date <- ymd(data_imp$date)
data_wkd <- data_imp %>%  mutate(weekday = weekdays(date))
head(data_wkd)
data_wkd <- data_imp %>%  mutate(weekday = weekdays(date)) %>% mutate(weektime = ifelse(weekday == "Saturday" | "Sunday", "weekend", "weekday"))
data_wkd <- data_imp %>%  mutate(weekday = weekdays(date)) %>% mutate(weektime = if weekday == "Saturday" | "Sunday", "weekend", else "weekday"))
data_wkd <- data_imp %>%  mutate(weekday = weekdays(date)) %>% mutate(weektime = ifelse(weekday == "Saturday" | weekday == "Sunday", "weekend", "weekday"))
head(data_wkd)
df <- ddply(data_wkd, c("weektime", "interval"), summarise, mean = mean(steps))
head(df)
plot(df$interval, df$mean, col = df$weektime, xlab = "Interval", ylab = "Average Steps")
plot(df$interval, df$mean, col = df$weektime, xlab = "Interval", ylab = "Average Steps", type = "l")
plot(df$interval, df$mean, col = c(df$weektime), xlab = "Interval", ylab = "Average Steps", type = "l")
plot(df$interval, df$mean, col = c("navy", "red"), xlab = "Interval", ylab = "Average Steps", type = "l")
library(ggplot2)
ggplot(interval, mean, data = df, col = weektime)
?ggplot
ggplot(interval, mean, data = df, col = weektime) +
geom_line()
p <- ggplot(interval, mean, data = df, col = weektime)
p + geom_line()
p <- ggplot(interval, mean, data = df, col = weektime)
p <- qplot(interval, mean, data = df, col = weektime)
p + geom_line()
p <- qplot(interval, mean, data = df, col = weektime, geom = c ("point", "smooth"))
p + geom_line()
qplot(interval, mean, data = df, col = weektime, geom = c ("point", "smooth"))
p <- qplot(interval, mean, data = df, col = weektime, geom = c ("point", "smooth"))
p + geom_line()
a <- data_wkd[data_wkd$weektime == "weekday",]
b <- !data_wkd[a]
b <- !data_wkd[a,]
b <- !data_wkd[data_wkd$weektime == "weekday",]
b <- data_wkd[!data_wkd$weektime == "weekday",]
density(a)
density(a$mean)
plot(a$interval, a$mean, col = "navy")
head(a)
a <- df[data_wkd$weektime == "weekday",]
b <- df[!data_wkd$weektime == "weekday",]
plot(a$interval, a$mean, col = "navy")
plot(a$interval, a$mean, col = "navy", type = "l")
str(a)
plot(a$interval, a$mean, col = "navy", type = "l")
summary(a$weektime)
plot(a$interval, a$mean, col = "navy", type = "l")
lines(b$interval, b$mean, col = red)
a <- df[data_wkd$weektime == "weekday",]
b <- df[!data_wkd$weektime == "weekday",]
plot(a$interval, a$mean, col = "navy", type = "l")
lines(b$interval, b$mean, col = red)
lines(b$interval, b$mean, col = "red")
summary(a$weektime)
plot(a$interval, a$mean, col = "navy", type = "l")
lines(b$interval, b$mean, col = "red")
plot(a$interval, a$mean, col = "navy", type = "l")
lines(b$interval, b$mean, col = "red", lwd= 5)
qplot(interval, mean, data = df, col = weektime, geom = c ("line", "smooth"))
qplot(interval, mean, data = df, col = weektime, geom = c ("line", "smooth"), main = "Average number of steps on weekdays vs. weekends")
qplot(interval, mean, data = df, col = weektime, geom = c ("line", "smooth"),
main = "Average number of steps on weekdays vs. weekends", ylab = "Average number of steps"))
qplot(interval, mean, data = df, col = weektime, geom = c ("line", "smooth"),
main = "Average number of steps on weekdays vs. weekends", ylab = "Average number of steps")
install.packages("xtable")
library(xtable)
xt <- xtable(summary(step$sum))
step <- data %>%  group_by(date) %>% summarize(sum(steps, na.rm = TRUE))
xt <- xtable(summary(step$sum))
